{
  "version": 3,
  "sources": ["../src/bag.ts", "../src/bitmap.ts", "../src/shape.ts", "../src/blocks.ts", "../src/game.ts"],
  "sourcesContent": ["/**\n * Bag object.\n */\nexport class Bag<T> {\n  /** Bag values. */\n  private values: T[];\n\n  /** Value index. */\n  private index: number;\n\n  /**\n   * Constructor.\n   * @param {T[]} values bag values.\n   */\n  constructor(values: T[]) {\n    this.values = values;\n    this.index = 0;\n  }\n\n  /**\n   * Gets the current value.\n   * @return {T} current value.\n   */\n  current(): T {\n    return this.values[this.index];\n  }\n\n  /**\n   * Gets the next value.\n   * @return {T} next value.\n   */\n  next(): T {\n    this.index = (this.index + 1) % this.values.length;\n    return this.current();\n  }\n\n  /**\n   * Gets the previous value.\n   * @return {T} previous value.\n   */\n  previous(): T {\n    this.index = (this.values.length + this.index - 1) % this.values.length;\n    return this.current();\n  }\n\n  /**\n   * Gets the value at a random value index.\n   * @return {T} value at a random value index.\n   */\n  random(): T {\n    this.index = Math.floor(Math.random() * this.values.length);\n    return this.current();\n  }\n}\n", "/** Style 2D. */\nexport type Style2D = string[][];\n\n/** Empty style. */\nexport const E = \"\";\n\n/**\n * Bitmap object.\n */\nexport class Bitmap {\n  /** Bitmap data. */\n  private data: Style2D;\n\n  /**\n   * Constructor.\n   * @param {Style2D} data bitmap data.\n   */\n  constructor(data: Style2D) {\n    this.data = data;\n  }\n\n  /**\n   * Empty bitmap with the given size.\n   * @param {number} rows bitmap rows.\n   * @param {number} cols bitmap cols.\n   * @return {Bitmap} empty bitmap.\n   */\n  static emptyWithSize(rows: number, cols: number): Bitmap {\n    return new Bitmap(\n      new Array<string>(rows).fill(E).map(() => new Array<string>(cols).fill(E))\n    );\n  }\n\n  /**\n   * Bitmap rows.\n   * @return {number} bitmap> rows.\n   */\n  rows(): number {\n    return this.data.length;\n  }\n\n  /**\n   * Bitmap cols.\n   * @return {number} bitmap cols.\n   */\n  cols(): number {\n    return this.data[0].length;\n  }\n\n  /**\n   * Rotates the current bitmap.\n   * @return {Bitmap} rotated bitmap.\n   */\n  rotate(): Bitmap {\n    const rotated: Style2D = [];\n    const rows = this.rows();\n    const cols = this.cols();\n\n    for (let col = 0; col < cols; col++) {\n      rotated[col] = [];\n      for (let row = 0; row < rows; row++) {\n        rotated[col][row] = this.data[rows - row - 1][col];\n      }\n    }\n\n    return new Bitmap(rotated);\n  }\n\n  /**\n   * All rotations of this current bitmap.\n   * @return {Bitmap[]} all rotations.\n   */\n  allRotations(): Bitmap[] {\n    const rotations: Bitmap[] = [this];\n\n    for (let i = 1; i < 4; i++) {\n      rotations.push(rotations[i - 1].rotate());\n    }\n\n    return rotations;\n  }\n\n  /**\n   * Draws the bitmap on the context.\n   * @param {CanvasRenderingContext2D} context game context.\n   * @param {number} x x position.\n   * @param {number} y y position.\n   * @param {number} size block size.\n   */\n  draw(context: CanvasRenderingContext2D, x: number, y: number, size: number) {\n    const rows = this.rows();\n    const cols = this.cols();\n\n    for (let row = 0; row < rows; row++) {\n      for (let col = 0; col < cols; col++) {\n        const style = this.data[row][col];\n        if (style != E) {\n          context.fillStyle = style;\n          context.fillRect(x + col * size, y + row * size, size, size);\n        }\n      }\n    }\n  }\n\n  /**\n   * Is this bitmap overlapping with the other bitmap.\n   * @param {number} rowOffset row offset.\n   * @param {number} colOffset col offset.\n   * @param {Bitmap} other other bitmap.\n   * @return {boolean} is overlapping.\n   */\n  isOverlapping(rowOffset: number, colOffset: number, other: Bitmap): boolean {\n    const maxRows: number = Math.min(other.rows(), rowOffset + this.rows());\n    const maxCols: number = Math.min(other.cols(), colOffset + this.cols());\n\n    for (let row = rowOffset; row < maxRows; row++) {\n      for (let col = colOffset; col < maxCols; col++) {\n        const value = this.data[row - rowOffset][col - colOffset];\n        const otherValue = other.data[row][col];\n        if (value != E && otherValue != E) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Copy from the given other bitmap.\n   * @param {number} rowOffset row offset.\n   * @param {number} colOffset col offset.\n   * @param {Bitmap} other other bitmap.\n   */\n  copyFrom(rowOffset: number, colOffset: number, other: Bitmap) {\n    const maxRows: number = Math.min(this.rows(), rowOffset + other.rows());\n    const maxCols: number = Math.min(this.cols(), colOffset + other.cols());\n\n    for (let row = rowOffset; row < maxRows; row++) {\n      for (let col = colOffset; col < maxCols; col++) {\n        const value = other.data[row - rowOffset][col - colOffset];\n        if (value != E) {\n          this.data[row][col] = value;\n        }\n      }\n    }\n  }\n\n  /**\n   * Is the row filled.\n   * @param {number} row row number.\n   * @return {boolean} is filled.\n   */\n  isRowFilled(row: number): boolean {\n    const cols = this.cols();\n\n    for (let col = 0; col < cols; col++) {\n      if (this.data[row][col] == E) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Removes the given row, and moved rows down.\n   * @param {number} row row number.\n   */\n  removeRow(row: number) {\n    this.data.splice(row, 1);\n    this.data.unshift(new Array<string>(this.cols()).fill(E));\n  }\n\n  /**\n   * Removes the filled rows, and returns the count.\n   * @return {number} removed count.\n   */\n  removeFilledRows(): number {\n    const rows = this.rows();\n    let count = 0;\n\n    for (let row = rows - 1; row >= count; ) {\n      if (this.isRowFilled(row)) {\n        this.removeRow(row);\n        count++;\n      } else {\n        row--;\n      }\n    }\n\n    return count;\n  }\n}\n", "import { Bag } from \"./bag.js\";\nimport { Bitmap } from \"./bitmap.js\";\n\n/**\n * Shape object.\n */\nexport class Shape {\n  /** All rotations. */\n  private rotations: Bag<Bitmap>;\n\n  /** Row offset. */\n  private rowOffset: number;\n\n  /** Column offset. */\n  private colOffset: number;\n\n  /**\n   * Constructor.\n   * @param {Bitmap} bitmap shape bitmap.\n   */\n  constructor(bitmap: Bitmap) {\n    this.rotations = new Bag<Bitmap>(bitmap.allRotations());\n    this.rowOffset = 0;\n    this.colOffset = 0;\n  }\n\n  /**\n   * Returns bitmaps as shapes.\n   * @param {Bitmap[]} bitmaps bitmap list.\n   * @return {Shape[]} shape list.\n   */\n  static asShapes(bitmaps: Bitmap[]): Shape[] {\n    return bitmaps.map((bitmap) => new Shape(bitmap));\n  }\n\n  /**\n   * Moves left within the given bitmap.\n   * @param {Bitmap} board board bitmap.\n   * @return {boolean} moved left.\n   */\n  left(board: Bitmap): boolean {\n    return this.changeColOffset(this.colOffset - 1, board);\n  }\n\n  /**\n   * Moves right within the given bitmap.\n   * @param {Bitmap} board board bitmap.\n   * @return {boolean} moved right.\n   */\n  right(board: Bitmap): boolean {\n    return this.changeColOffset(this.colOffset + 1, board);\n  }\n\n  /**\n   * Rotates shape within the given bitmap.\n   * @param {Bitmap} board board bitmap.\n   * @return {boolean} rotated shape.\n   */\n  rotate(board: Bitmap): boolean {\n    this.rotations.next();\n\n    this.fitWithin(board);\n    if (this.isOverlapping(board)) {\n      this.rotations.previous();\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Moves down within the given bitmap.\n   * @param {Bitmap} board board bitmap.\n   * @return {boolean} moved down.\n   */\n  down(board: Bitmap): boolean {\n    const before = this.rowOffset;\n    this.rowOffset++;\n\n    if (!this.isWithin(board) || this.isOverlapping(board)) {\n      this.rowOffset = before;\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Draws the shape on the context.\n   * @param {CanvasRenderingContext2D} context game context.\n   * @param {number} size block size.\n   */\n  draw(context: CanvasRenderingContext2D, size: number) {\n    this.rotations\n      .current()\n      .draw(context, this.colOffset * size, this.rowOffset * size, size);\n  }\n\n  /**\n   * Resets the shape position.\n   * @param {Bitmap} board board bitmap.\n   * @return {boolean} not overlapping.\n   */\n  resetPosition(board: Bitmap) {\n    this.rowOffset = 0;\n    this.colOffset = Math.floor(\n      (board.cols() - this.rotations.current().cols()) / 2\n    );\n\n    return !this.isOverlapping(board);\n  }\n\n  /**\n   * Copy this shape to the board.\n   * @param {Bitma} board board bitmap.\n   */\n  copyTo(board: Bitmap) {\n    board.copyFrom(this.rowOffset, this.colOffset, this.rotations.current());\n  }\n\n  /**\n   * Changes the column offset within the given bitmap.\n   * @param {number} colOffset column offset.\n   * @param {Bitmap} board board bitmap.\n   * @return {boolean} changed X.\n   */\n  private changeColOffset(colOffset: number, board: Bitmap): boolean {\n    const before = this.colOffset;\n    this.colOffset = colOffset;\n\n    if (!this.isWithin(board) || this.isOverlapping(board)) {\n      this.colOffset = before;\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Fit this shape within the given board.\n   * @param {Bitmap} board board bitmap.\n   */\n  private fitWithin(board: Bitmap) {\n    const boardRows = board.rows();\n    const boardCols = board.cols();\n\n    if (this.colOffset < 0) {\n      this.colOffset = 0;\n    }\n\n    const currentCols = this.rotations.current().cols();\n    if (this.colOffset + currentCols > boardCols) {\n      this.colOffset = boardCols - currentCols;\n    }\n\n    const currentRows = this.rotations.current().rows();\n    if (this.rowOffset + currentRows > boardRows) {\n      this.rowOffset = boardRows - currentRows;\n    }\n  }\n\n  /**\n   * Is this within the given board.\n   * @param {Bitmap} board board bitmap.\n   * @return {boolean} is within.\n   */\n  private isWithin(board: Bitmap): boolean {\n    if (this.colOffset < 0) {\n      return false;\n    }\n\n    const currentCols = this.rotations.current().cols();\n    const boardCols = board.cols();\n\n    if (this.colOffset + currentCols > boardCols) {\n      return false;\n    }\n\n    const currentRows = this.rotations.current().rows();\n    const boardRows = board.rows();\n\n    if (this.rowOffset + currentRows > boardRows) {\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Is this shape overlapping with the given board.\n   * @param {Bitmap} board board bitmap.\n   * @return {boolean} is overlapping.\n   */\n  private isOverlapping(board: Bitmap): boolean {\n    return this.rotations\n      .current()\n      .isOverlapping(this.rowOffset, this.colOffset, board);\n  }\n}\n", "import { Bitmap, E } from \"./bitmap.js\";\n\nconst B = \"#0000ff\";\nconst C = \"#00ffff\";\nconst G = \"#00ff00\";\nconst O = \"#ff7f00\";\nconst P = \"#800080\";\nconst R = \"#ff0000\";\nconst Y = \"#ffff00\";\n\n/** Block I. */\nconst BLOCK_I = new Bitmap([[C, C, C, C]]);\n\n/** Block J. */\nconst BLOCK_J = new Bitmap([\n  [B, E, E],\n  [B, B, B],\n]);\n\n/** Block L. */\nconst BLOCK_L = new Bitmap([\n  [E, E, O],\n  [O, O, O],\n]);\n\n/** Block O. */\nconst BLOCK_O = new Bitmap([\n  [Y, Y],\n  [Y, Y],\n]);\n\n/** Block S. */\nconst BLOCK_S = new Bitmap([\n  [E, G, G],\n  [G, G, E],\n]);\n\n/** Block T.  */\nconst BLOCK_T = new Bitmap([\n  [P, P, P],\n  [E, P, E],\n]);\n\n/** Block Z. */\nconst BLOCK_Z = new Bitmap([\n  [R, R, E],\n  [E, R, R],\n]);\n\nexport const BLOCKS: Bitmap[] = [\n  BLOCK_I,\n  BLOCK_J,\n  BLOCK_L,\n  BLOCK_O,\n  BLOCK_S,\n  BLOCK_T,\n  BLOCK_Z,\n];\n", "import { Bag } from \"./bag.js\";\nimport { Bitmap } from \"./bitmap.js\";\nimport { Shape } from \"./shape.js\";\nimport { BLOCKS } from \"./blocks.js\";\n\n/** Row count. */\nconst ROWS = 15;\n\n/** Column count. */\nconst COLS = 10;\n\n/** Size of a bock. */\nconst SIZE = 20;\n\n/** Update speed. */\nconst UPDATE_SPEED = 100;\n\n/** Step speed. */\nconst STEP_SPEED = 1000;\n\n/** Game state. */\nenum State {\n  PLAYING,\n  PAUSED,\n  GAME_OVER,\n}\n\n/**\n * Game object.\n */\nexport class Game {\n  /** Game canvas. */\n  private canvas: HTMLCanvasElement;\n\n  /** Game context. */\n  private context: CanvasRenderingContext2D;\n\n  /** Game board. */\n  private board: Bitmap;\n\n  /** Bag of the shapes. */\n  private shapes: Bag<Shape>;\n\n  /** Last update. */\n  private lastUpdate: DOMHighResTimeStamp;\n\n  /** Last step. */\n  private lastStep: DOMHighResTimeStamp;\n\n  /** Game state. */\n  private state: State;\n\n  /** Lines filled. */\n  private lines: number;\n\n  /** Game score. */\n  private score: number;\n\n  /**\n   * Constructor.\n   * @param {HTMLCanvasElement} canvas game canvas.\n   */\n  constructor(canvas: HTMLCanvasElement) {\n    this.canvas = canvas;\n    this.context = canvas.getContext(\"2d\")!;\n    this.board = Bitmap.emptyWithSize(ROWS, COLS);\n    this.lastUpdate = 0;\n    this.lastStep = 0;\n    this.state = State.PLAYING;\n    this.lines = 0;\n    this.score = 0;\n\n    this.shapes = new Bag<Shape>(Shape.asShapes(BLOCKS));\n\n    this.resize();\n    this.nextShape();\n    this.listenForKeyEvents();\n    this.requestUpdate();\n  }\n\n  /**\n   * Clear game.\n   */\n  clear() {\n    this.board = Bitmap.emptyWithSize(ROWS, COLS);\n    this.lastUpdate = 0;\n    this.lastStep = 0;\n    this.state = State.PLAYING;\n    this.lines = 0;\n    this.score = 0;\n    this.nextShape();\n  }\n\n  /**\n   * Go left.\n   */\n  left() {\n    this.shapes.current().left(this.board);\n  }\n\n  /**\n   * Go right.\n   */\n  right() {\n    this.shapes.current().right(this.board);\n  }\n\n  /**\n   * Go down.\n   */\n  down() {\n    this.moveDown();\n  }\n\n  /**\n   * Rotate shape.\n   */\n  rotate() {\n    this.shapes.current().rotate(this.board);\n  }\n\n  /**\n   * Toggle game paused state.\n   */\n  togglePaused() {\n    switch (this.state) {\n      case State.PLAYING:\n        this.state = State.PAUSED;\n        break;\n\n      case State.PAUSED:\n        this.state = State.PLAYING;\n        break;\n    }\n  }\n\n  /**\n   * Resizes the game canvas.\n   */\n  private resize() {\n    const ratio = this.canvas.width / (COLS * SIZE);\n    this.canvas.height = ratio * (ROWS * SIZE);\n    this.context.scale(ratio, ratio);\n  }\n\n  /**\n   * Listens for key events.\n   */\n  private listenForKeyEvents() {\n    document.addEventListener(\"keydown\", (event: KeyboardEvent) => {\n      this.onKeyEvent(event.key.toLowerCase());\n    });\n  }\n\n  /**\n   * On game key event.\n   * @param {string} key game key.\n   */\n  private onKeyEvent(key: string) {\n    if (!this.onControlKey(key) && this.state == State.PLAYING) {\n      this.onPlayKey(key);\n    }\n  }\n\n  /**\n   * On game control key.\n   * @param {string} key control key.\n   * @return {boolean} key used.\n   */\n  private onControlKey(key: string): boolean {\n    switch (key) {\n      case \"enter\":\n        this.togglePaused();\n        break;\n\n      case \"r\":\n        this.clear();\n        break;\n\n      default:\n        return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * On game pley key.\n   * @param {string} key play key.\n   * @return {boolean} key used.\n   */\n  private onPlayKey(key: string): boolean {\n    switch (key) {\n      case \"arrowleft\":\n        this.left();\n        break;\n\n      case \"arrowright\":\n        this.right();\n        break;\n\n      case \"arrowup\":\n        this.rotate();\n        break;\n\n      case \"arrowdown\":\n        this.down();\n        break;\n\n      case \"spacebar\":\n      case \" \":\n        this.throwDown();\n        break;\n\n      default:\n        return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Request update.\n   */\n  private requestUpdate() {\n    window.requestAnimationFrame((now: DOMHighResTimeStamp) => {\n      this.update(now);\n      this.requestUpdate();\n    });\n  }\n\n  /**\n   * Update game.\n   * @param {DOMHighResTimeStamp} now now time.\n   */\n  private update(now: DOMHighResTimeStamp) {\n    if (this.state == State.PLAYING && now - this.lastStep > STEP_SPEED) {\n      this.moveDown();\n      this.lastStep = now;\n    }\n\n    if (now - this.lastUpdate > UPDATE_SPEED) {\n      this.context.clearRect(0, 0, COLS * SIZE, ROWS * SIZE);\n      this.board.draw(this.context, 0, 0, SIZE);\n      this.shapes.current().draw(this.context, SIZE);\n      this.drawStats();\n      this.lastUpdate = now;\n    }\n  }\n\n  /**\n   * Draws the game stats.\n   */\n  private drawStats() {\n    const width = COLS * SIZE;\n    const height = ROWS * SIZE;\n\n    this.context.fillStyle = \"#000000\";\n    this.context.textAlign = \"left\";\n    this.context.font = '10px \"Press Start 2P\"';\n    this.context.fillText(\"Lines\", 2, 12);\n    this.context.fillText(this.prependZeros(this.lines, 5), 2, 24);\n\n    const rightEdge = width - 2;\n    this.context.textAlign = \"right\";\n    this.context.fillText(\"Score\", rightEdge, 12);\n    this.context.fillText(this.prependZeros(this.score, 5), rightEdge, 24);\n\n    if (this.state == State.GAME_OVER) {\n      this.context.fillStyle = \"#ff0000\";\n      this.context.textAlign = \"center\";\n      this.context.font = '20px \"Press Start 2P\"';\n      this.context.fillText(\n        \"Game Over\",\n        Math.floor(width / 2),\n        Math.floor(height / 2)\n      );\n    } else if (this.state == State.PAUSED) {\n      this.context.fillStyle = \"#00ff00\";\n      this.context.textAlign = \"center\";\n      this.context.font = '20px \"Press Start 2P\"';\n      this.context.fillText(\n        \"Paused\",\n        Math.floor(width / 2),\n        Math.floor(height / 2)\n      );\n    }\n  }\n\n  /**\n   * Next shape.\n   */\n  private nextShape() {\n    this.shapes.random();\n    if (!this.shapes.current().resetPosition(this.board)) {\n      this.state = State.GAME_OVER;\n    }\n  }\n\n  /**\n   * Moves the shape down.\n   * @return {boolean} moved down.\n   */\n  private moveDown(): boolean {\n    if (!this.shapes.current().down(this.board)) {\n      this.shapes.current().copyTo(this.board);\n\n      const lines = this.board.removeFilledRows();\n      this.lines += lines;\n      if (lines < 4) {\n        this.score += this.lines * 10;\n      } else {\n        this.score += 1000;\n      }\n\n      this.nextShape();\n\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Throw the shape down.\n   */\n  private throwDown() {\n    while (this.moveDown()) {\n      // empty\n    }\n  }\n\n  /**\n   * Prepends zeros to number.\n   * @param {number} value number value.\n   * @param {number} size text size.\n   * @return {string} number prepended with zeros.\n   */\n  private prependZeros(value: number, size: number) {\n    const text = \"000000\" + value;\n    return text.substr(text.length - size);\n  }\n}\n\nnew Game(document.getElementById(\"board\")! as HTMLCanvasElement);\n"],
  "mappings": "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",
  "names": []
}
